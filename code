# Importing all libraries required in this notebook
import numpy as np #For numerical operations
import pandas as pd #For handling the dataset
import matplotlib.pyplot as plt #For visualization
#%matplotlib inline
# Reading data from remote link
url = r"http://bit.ly/w-data"
df = pd.read_csv(url)
print("Data import successful")
df.head(10) 
df.info()
df.describe()
df.corr()
# Plotting and Visualing the data
df.plot(x='Hours', y='Scores',style='o')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()
#preprocessing the data
X = df.iloc[:, :-1].values  
y = df.iloc[:, 1].values
#splitting the dataset into training and testing.We'll do this by using Scikit-Learn's built-in train_test_split() method:
from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                            test_size=0.2, random_state=42)
#We have split our data into training and testing sets, and now is finally the time to train our algorithm
#For this task, we are using simple Linear Regression model from scikit-learn library
from sklearn.linear_model import LinearRegression  
reg= LinearRegression()  
reg.fit(X_train, y_train) 
print("Training complete.")
#let check the model performance on test data
y_pred = reg.predict(X_test) 
#Comparing Actual vs Predicted
df2 = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df2
#Plotting the regression line 
line = reg.coef_*X+reg.intercept_
plt.scatter(X,y,label='data')
plt.plot(X, line,label='Line of best fit',color='r')
plt.legend()
#Accuracy of model on test data
print('Accuracy:',reg.score(X_test,y_test))
from sklearn import metrics  
print('Mean Absolute Error:',metrics.mean_absolute_error(y_test, y_pred))
#Giving real time user input
hours = float(9.25)
own_pred = reg.predict([[hours]])
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))
# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred}) 
df
df.plot(kind='bar',figsize=(5,5))
plt.grid(which='major', linewidth='0.5', color='red')
plt.grid(which='minor', linewidth='0.5', color='blue')
plt.show()
#Giving real time user input
hours = 9.25
test = np.array([hours])
test = test.reshape(-1, 1)
own_pred = reg.predict([[hours]])
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))
from sklearn import metrics  
print('Mean Absolute Error:',metrics.mean_absolute_error(y_test, y_pred)) 
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print('R-2:', metrics.r2_score(y_test, y_pred))
